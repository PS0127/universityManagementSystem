@page
@model TeachersModel
@{
}

<h2>Teachers</h2>
<a class="btn btn-primary btn-sm" href="/Teachers/Create">New Teacher</a> <!-- button for adding new teachers -->

<select name="options" id="options" onchange="sortTable()">

    <option value="idasc">Sort by: ID - Low to High</option>
    <option value="iddesc">Sort by: ID - High to Low</option>
    <option value="firstnameasc">Sort by: First Name - A to Z</option>
    <option value="firstnamedesc">Sort by: First Name - Z to A</option>
    <option value="lastnameasc">Sort by: Last Name - A to Z</option>
    <option value="lasttnamedesc">Sort by: Last Name - Z to A</option>
    <option value="department">Sort by: Department</option>
</select>

<table class="table" id="teachersTable">
    <thead>
        <tr>
            <th>ID</th>
            <th>Firstname</th>
            <th>Lastname</th>
            <th>Course</th>
        </tr>
    </thead>

    <!-- Makes table row for each teacher -->
    @foreach (var teacher in Model.Allteachers)
    {
        <tr id="dataTable">
            <td>@teacher.Id</td>
            <td>@teacher.firstName</td>
            <td>@teacher.lastName</td>
            <td>@teacher.department</td>
            <td>
                <div class="studentButtons">

                    <a class="btn btn-primary btn-sm" href="/Teachers/Edit?id=@teacher.Id">Edit</a>
                    <a class="btn btn-danger btn-sm" href="/Teachers/Delete?id=@teacher.Id">Delete</a>

                </div>

            </td>
        </tr>
    }

</table>

<script>
    function sortTable() {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("teachersTable");
        var options = document.getElementById("options").value;

        // if statements to determine which column to filter
        if (options.includes("id")) {
            n = 0;
        }
        else if (options.includes("firstname")) {
            n = 1;
        }
        else if (options.includes("lastname")) {
            n = 2;
        }
        else if (options.includes("department")) {
            n = 3;
        }
        switching = true;

        while (switching) {

            switching = false;
            rows = table.rows;
  
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (options.includes("asc")) {
                    if (n != 0) {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            // If so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                    else {
                        if (Number(x.innerHTML) > Number(y.innerHTML)) {
                            shouldSwitch = true;
                            break;
                        }
                    }

                } else if (options.includes("desc")) {
                    if (n != 0) {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            // If so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                    else {
                        if (Number(x.innerHTML) < Number(y.innerHTML)) {
                            shouldSwitch = true;
                            break;
                        }
                    }


                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } 
            
        }
    }


</script>